user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # mods que haceimos de manera global
    # Specifies the maximum accepted body size of a client request,
    # as indicated by the request header Content-Length.
    client_max_body_size 512M;
    server_names_hash_bucket_size 128;
    client_body_timeout 110;
    proxy_connect_timeout       7200;
    proxy_send_timeout          7200;
    send_timeout                7200;
    proxy_read_timeout 7200; #Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the

    include /etc/nginx/conf.d/*.conf;

    # redirect the www a sin www
    server {
      server_name "~^www.(.*)$" ;
      return 301 $scheme://$1$request_uri ;
    }
    
    # redirect the 80 a https
    #server {
    #  listen 80 default;
    #  add_header Strict-Transport-Security max-age=2592000;
    #  rewrite ^/.*$ https://$host$request_uri? permanent;
    #}

    server {
      listen 80 default;

      # ssl settings
      #ssl on;
      #ssl_certificate     /etc/nginx/ssl/ssl-cert.crt;
      #ssl_certificate_key /etc/nginx/ssl/ssl-cert.key;
      #keepalive_timeout 60;

      # limit ciphers
      #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
      #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      #ssl_prefer_server_ciphers    on;

      # proxy header and settings
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect off;

      # Let the OpenERP web service know that we're using HTTPS, otherwise
      # it will generate URL using http:// and not https://
      proxy_set_header X-Forwarded-Proto https;

      # increase proxy buffer to handle some Odoo web requests
      proxy_buffers 16 64k;
      proxy_buffer_size 128k;

      # enable data compression
      gzip on;
      gzip_min_length 1100;
      gzip_buffers 4 32k;
      gzip_types text/plain application/x-javascript text/xml text/css;
      gzip_vary on;

      # cache some static data in memory for 60mins.
      # under heavy load this should relieve stress on the OpenERP web interface a bit.
      location ~* /web/static/ {
          proxy_cache_valid 200 60m;
          proxy_buffering    on;
          expires 864000;
          proxy_pass http://odoo:8069;
      }
      
      # force timeouts if the backend dies
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;

      location / {
          proxy_pass http://odoo:8069;
      }

      location /longpolling {
          proxy_pass http://odoo:8072;
      }

    }
  }
